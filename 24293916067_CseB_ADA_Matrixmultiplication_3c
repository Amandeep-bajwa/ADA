#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void addMatrix(int n, int A[n][n], int B[n][n], int C[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void subMatrix(int n, int A[n][n], int B[n][n], int C[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

void strassen(int n, int A[n][n], int B[n][n], int C[n][n]) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = n / 2;

    // Submatrices for A and B
    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize];
    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize];
    int C11[newSize][newSize], C12[newSize][newSize], C21[newSize][newSize], C22[newSize][newSize];

    // Temporary matrices for intermediate steps
    int M1[newSize][newSize], M2[newSize][newSize], M3[newSize][newSize], M4[newSize][newSize];
    int M5[newSize][newSize], M6[newSize][newSize], M7[newSize][newSize];
    int temp1[newSize][newSize], temp2[newSize][newSize];

    // Divide matrices A and B into submatrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    // M1 = (A11 + A22) * (B11 + B22)
    addMatrix(newSize, A11, A22, temp1);
    addMatrix(newSize, B11, B22, temp2);
    strassen(newSize, temp1, temp2, M1);

    // M2 = (A21 + A22) * B11
    addMatrix(newSize, A21, A22, temp1);
    strassen(newSize, temp1, B11, M2);

    // M3 = A11 * (B12 - B22)
    subMatrix(newSize, B12, B22, temp2);
    strassen(newSize, A11, temp2, M3);

    // M4 = A22 * (B21 - B11)
    subMatrix(newSize, B21, B11, temp2);
    strassen(newSize, A22, temp2, M4);

    // M5 = (A11 + A12) * B22
    addMatrix(newSize, A11, A12, temp1);
    strassen(newSize, temp1, B22, M5);

    // M6 = (A21 - A11) * (B11 + B12)
    subMatrix(newSize, A21, A11, temp1);
    addMatrix(newSize, B11, B12, temp2);
    strassen(newSize, temp1, temp2, M6);

    // M7 = (A12 - A22) * (B21 + B22)
    subMatrix(newSize, A12, A22, temp1);
    addMatrix(newSize, B21, B22, temp2);
    strassen(newSize, temp1, temp2, M7);

    // C11 = M1 + M4 - M5 + M7
    addMatrix(newSize, M1, M4, temp1);
    subMatrix(newSize, temp1, M5, temp2);
    addMatrix(newSize, temp2, M7, C11);

    // C12 = M3 + M5
    addMatrix(newSize, M3, M5, C12);

    // C21 = M2 + M4
    addMatrix(newSize, M2, M4, C21);

    // C22 = M1 - M2 + M3 + M6
    subMatrix(newSize, M1, M2, temp1);
    addMatrix(newSize, temp1, M3, temp2);
    addMatrix(newSize, temp2, M6, C22);

    // Combine submatrices into final result C
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
}

void generateMatrix(int n, int M[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            M[i][j] = rand() % 10;
        }
    }
}

int main() {
    srand(time(NULL));

    int sizes[] = {2, 4, 8, 16, 32, 64, 128};
    int numSizes = sizeof(sizes) / sizeof(sizes[0]);

    for (int s = 0; s < numSizes; s++) {
        int n = sizes[s];
        int A[n][n], B[n][n], C[n][n];

        generateMatrix(n, A);
        generateMatrix(n, B);

        clock_t start = clock();
        strassen(n, A, B, C);
        clock_t end = clock();

        double time_taken = (double)(end - start) / CLOCKS_PER_SEC;
        printf("Matrix size %d x %d -> Time taken: %f seconds\n", n, n, time_taken);
    }

    return 0;
}
