#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int knapsackDP(int values[], int weights[], int n, int W) {
    int **dp = (int**)malloc((n + 1) * sizeof(int*));
    
    for (int i = 0; i <= n; i++) {
        dp[i] = (int*)malloc((W + 1) * sizeof(int));
    }

    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (weights[i - 1] <= w) {
                dp[i][w] = (values[i - 1] + dp[i - 1][w - weights[i - 1]] > dp[i - 1][w])
                    ? values[i - 1] + dp[i - 1][w - weights[i - 1]]
                    : dp[i - 1][w];
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    int result = dp[n][W];
    for (int i = 0; i <= n; i++) {
        free(dp[i]);
    }
    free(dp);

    return result;
}

int main() {
    srand(time(NULL));
    int n, W;
    
    printf("Enter number of items (n): ");
    scanf("%d", &n);
    
    printf("Enter knapsack capacity (W): ");
    scanf("%d", &W);

    int *values = (int*)malloc(n * sizeof(int));
    int *weights = (int*)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        values[i] = rand() % 100 + 1;
        weights[i] = rand() % 50 + 1;
    }

    clock_t start = clock();
    int maxVal = knapsackDP(values, weights, n, W);
    clock_t end = clock();

    double exec_time = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Maximum value (DP 0/1): %d\n", maxVal);
    printf("Execution Time (DP): %f seconds\n", exec_time);

    free(values);
    free(weights);

    return 0;
}
