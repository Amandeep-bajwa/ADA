#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void addMatrix(int n, int A[n][n], int B[n][n], int C[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void subMatrix(int n, int A[n][n], int B[n][n], int C[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

void multiplyDC(int n, int A[n][n], int B[n][n], int C[n][n]) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = n / 2;
    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize];
    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize];
    int C11[newSize][newSize], C12[newSize][newSize], C21[newSize][newSize], C22[newSize][newSize];
    int M1[newSize][newSize], M2[newSize][newSize];

    // Split A and B into submatrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    // Recursive calls to multiply submatrices and add them
    multiplyDC(newSize, A11, B11, M1);
    multiplyDC(newSize, A12, B21, M2);
    addMatrix(newSize, M1, M2, C11);

    multiplyDC(newSize, A11, B12, M1);
    multiplyDC(newSize, A12, B22, M2);
    addMatrix(newSize, M1, M2, C12);

    multiplyDC(newSize, A21, B11, M1);
    multiplyDC(newSize, A22, B21, M2);
    addMatrix(newSize, M1, M2, C21);

    multiplyDC(newSize, A21, B12, M1);
    multiplyDC(newSize, A22, B22, M2);
    addMatrix(newSize, M1, M2, C22);

    // Combine the submatrices into the final result
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
}

void generateMatrix(int n, int M[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            M[i][j] = rand() % 10;
        }
    }
}

int main() {
    srand(time(NULL));

    int sizes[] = {2, 4, 8, 16, 32, 64, 128, 256};
    int numSizes = sizeof(sizes) / sizeof(sizes[0]);

    for (int s = 0; s < numSizes; s++) {
        int n = sizes[s];
        int A[n][n], B[n][n], C[n][n];

        generateMatrix(n, A);
        generateMatrix(n, B);

        clock_t start = clock();
        multiplyDC(n, A, B, C);
        clock_t end = clock();

        double time_taken = (double)(end - start) / CLOCKS_PER_SEC;
        printf("Matrix size %d x %d -> Time taken: %f seconds\n", n, n, time_taken);
    }

    return 0;
}
